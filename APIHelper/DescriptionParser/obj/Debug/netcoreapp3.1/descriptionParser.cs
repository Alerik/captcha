//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\xampp\htdocs\captcha\APIHelper\DescriptionParser\description.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class descriptionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, STAR=11, IDENTIFIER=12, WS=13;
	public const int
		RULE_column = 0, RULE_arg = 1, RULE_function = 2, RULE_table = 3, RULE_literal_inside = 4, 
		RULE_literal = 5, RULE_command = 6, RULE_header = 7, RULE_category = 8, 
		RULE_category_section = 9, RULE_top_section = 10, RULE_file = 11;
	public static readonly string[] ruleNames = {
		"column", "arg", "function", "table", "literal_inside", "literal", "command", 
		"header", "category", "category_section", "top_section", "file"
	};

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'('", "','", "')'", "';'", "'table'", "'<'", "'>'", 
		"'#'", "':'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "STAR", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "description.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static descriptionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public descriptionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public descriptionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ColumnContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(descriptionParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(descriptionParser.IDENTIFIER, i);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 0, RULE_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(IDENTIFIER);
			State = 25; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(descriptionParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(descriptionParser.IDENTIFIER, i);
		}
		public ITerminalNode STAR() { return GetToken(descriptionParser.STAR, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 2, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(IDENTIFIER);
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 28; Match(STAR);
				}
			}

			State = 31; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(descriptionParser.IDENTIFIER, 0); }
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(T__0);
			State = 34; Match(IDENTIFIER);
			State = 35; Match(T__1);
			State = 41;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 36; arg();
					State = 37; Match(T__2);
					}
					} 
				}
				State = 43;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 44; arg();
				}
			}

			State = 47; Match(T__3);
			State = 48; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(descriptionParser.IDENTIFIER, 0); }
		public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 6, RULE_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(T__5);
			State = 51; Match(IDENTIFIER);
			State = 52; Match(T__1);
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 53; column();
					State = 54; Match(T__2);
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 61; column();
				}
			}

			State = 64; Match(T__3);
			State = 65; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_insideContext : ParserRuleContext {
		public Literal_insideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_inside; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterLiteral_inside(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitLiteral_inside(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_inside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_insideContext literal_inside() {
		Literal_insideContext _localctx = new Literal_insideContext(Context, State);
		EnterRule(_localctx, 8, RULE_literal_inside);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 67;
					MatchWildcard();
					}
					} 
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Literal_insideContext literal_inside() {
			return GetRuleContext<Literal_insideContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 10, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(T__6);
			State = 74; literal_inside();
			State = 75; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_command);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; function();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; table();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79; literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(descriptionParser.IDENTIFIER, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 14, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(T__8);
			State = 83; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CategoryContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(descriptionParser.IDENTIFIER, 0); }
		public CategoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterCategory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitCategory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CategoryContext category() {
		CategoryContext _localctx = new CategoryContext(Context, State);
		EnterRule(_localctx, 16, RULE_category);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(IDENTIFIER);
			State = 86; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_sectionContext : ParserRuleContext {
		public CategoryContext category() {
			return GetRuleContext<CategoryContext>(0);
		}
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public Category_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterCategory_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitCategory_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategory_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Category_sectionContext category_section() {
		Category_sectionContext _localctx = new Category_sectionContext(Context, State);
		EnterRule(_localctx, 18, RULE_category_section);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 88; category();
				}
			}

			State = 92;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 91; command();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_sectionContext : ParserRuleContext {
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public Category_sectionContext[] category_section() {
			return GetRuleContexts<Category_sectionContext>();
		}
		public Category_sectionContext category_section(int i) {
			return GetRuleContext<Category_sectionContext>(i);
		}
		public Top_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterTop_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitTop_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_sectionContext top_section() {
		Top_sectionContext _localctx = new Top_sectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_top_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; header();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__6) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 97; category_section();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public Top_sectionContext[] top_section() {
			return GetRuleContexts<Top_sectionContext>();
		}
		public Top_sectionContext top_section(int i) {
			return GetRuleContext<Top_sectionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdescriptionListener typedListener = listener as IdescriptionListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdescriptionVisitor<TResult> typedVisitor = visitor as IdescriptionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 22, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 103; top_section();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__8 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', 'o', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ' ', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '*', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '-', '\v', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x30', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', ';', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'>', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', '\x41', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\a', '\x6', 'G', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'J', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', 'S', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x5', '\v', '\\', '\n', 
		'\v', '\x3', '\v', '\x6', '\v', '_', '\n', '\v', '\r', '\v', '\xE', '\v', 
		'`', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x65', '\n', '\f', '\f', '\f', 
		'\xE', '\f', 'h', '\v', '\f', '\x3', '\r', '\x6', '\r', 'k', '\n', '\r', 
		'\r', '\r', '\xE', '\r', 'l', '\x3', '\r', '\x2', '\x2', '\xE', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x2', '\x2', '\x2', 'n', '\x2', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', '#', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x34', '\x3', '\x2', '\x2', '\x2', '\n', 'H', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'K', '\x3', '\x2', '\x2', '\x2', '\xE', 'R', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'T', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x14', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x62', '\x3', '\x2', '\x2', '\x2', '\x18', 'j', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1B', '\a', '\xE', '\x2', '\x2', '\x1B', '\x1C', 
		'\a', '\xE', '\x2', '\x2', '\x1C', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x1F', '\a', '\xE', '\x2', '\x2', '\x1E', ' ', '\a', '\r', '\x2', 
		'\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\"', 
		'\a', '\xE', '\x2', '\x2', '\"', '\x5', '\x3', '\x2', '\x2', '\x2', '#', 
		'$', '\a', '\x3', '\x2', '\x2', '$', '%', '\a', '\xE', '\x2', '\x2', '%', 
		'+', '\a', '\x4', '\x2', '\x2', '&', '\'', '\x5', '\x4', '\x3', '\x2', 
		'\'', '(', '\a', '\x5', '\x2', '\x2', '(', '*', '\x3', '\x2', '\x2', '\x2', 
		')', '&', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '/', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x30', '\x5', '\x4', '\x3', '\x2', '/', '.', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x6', '\x2', '\x2', '\x32', 
		'\x33', '\a', '\a', '\x2', '\x2', '\x33', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\b', '\x2', '\x2', '\x35', '\x36', '\a', '\xE', 
		'\x2', '\x2', '\x36', '<', '\a', '\x4', '\x2', '\x2', '\x37', '\x38', 
		'\x5', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\x5', '\x2', '\x2', 
		'\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', '\x37', '\x3', '\x2', '\x2', 
		'\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\x5', '\x2', 
		'\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x6', '\x2', '\x2', '\x43', '\x44', '\a', '\a', '\x2', 
		'\x2', '\x44', '\t', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\v', '\x2', 
		'\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'I', '\v', '\x3', '\x2', '\x2', '\x2', 'J', 
		'H', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\t', '\x2', '\x2', 'L', 
		'M', '\x5', '\n', '\x6', '\x2', 'M', 'N', '\a', '\n', '\x2', '\x2', 'N', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'O', 'S', '\x5', '\x6', '\x4', '\x2', 
		'P', 'S', '\x5', '\b', '\x5', '\x2', 'Q', 'S', '\x5', '\f', '\a', '\x2', 
		'R', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '\v', '\x2', '\x2', 'U', 'V', '\a', '\xE', '\x2', 
		'\x2', 'V', '\x11', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\xE', 
		'\x2', '\x2', 'X', 'Y', '\a', '\f', '\x2', '\x2', 'Y', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\\', '\x5', '\x12', '\n', '\x2', '[', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', 
		'^', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x5', '\xE', '\b', '\x2', 
		'^', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', 
		'`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x15', '\x3', '\x2', '\x2', '\x2', '\x62', '\x66', '\x5', 
		'\x10', '\t', '\x2', '\x63', '\x65', '\x5', '\x14', '\v', '\x2', '\x64', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x17', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x5', '\x16', '\f', '\x2', 'j', 
		'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', '\x19', '\x3', '\x2', '\x2', '\x2', '\r', '\x1F', '+', '/', '<', 
		'@', 'H', 'R', '[', '`', '\x66', 'l',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
