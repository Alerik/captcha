//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\xampp\htdocs\captcha\APIHelper\DescriptionParser\Parsing\DescriptParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DescriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Hash=1, Star=2, Semicolon=3, Colin=4, Langle=5, Rangle=6, Lparam=7, Rparam=8, 
		LCurly=9, RCurly=10, TablePrefix=11, ArgumentPrefix=12, Comma=13, Uses=14, 
		As=15, HttpMethod=16, Function=17, Table=18, Identifier=19, IntegerLiteral=20, 
		NullLiteral=21, BooleanLiteral=22, DecimalLiteral=23, StringLiteral=24, 
		WhiteSpaces=25, LineTerminator=26, TableReference=27, ArgumentReference=28, 
		Literal=29, LParam=30, RParam=31, Colon=32;
	public const int
		RULE_literal = 0, RULE_tableReference = 1, RULE_argumentReference = 2, 
		RULE_reference = 3, RULE_column = 4, RULE_typedParameter = 5, RULE_columnParameter = 6, 
		RULE_functionParameter = 7, RULE_superFunctionArgument = 8, RULE_superFunction = 9, 
		RULE_superFunctionClause = 10, RULE_usesClause = 11, RULE_usesFrag = 12, 
		RULE_functionDefinition = 13, RULE_tableDefinition = 14, RULE_literalDefinition = 15, 
		RULE_definition = 16, RULE_file = 17, RULE_sectionHeader = 18, RULE_section = 19, 
		RULE_subsectionHeader = 20, RULE_subsection = 21;
	public static readonly string[] ruleNames = {
		"literal", "tableReference", "argumentReference", "reference", "column", 
		"typedParameter", "columnParameter", "functionParameter", "superFunctionArgument", 
		"superFunction", "superFunctionClause", "usesClause", "usesFrag", "functionDefinition", 
		"tableDefinition", "literalDefinition", "definition", "file", "sectionHeader", 
		"section", "subsectionHeader", "subsection"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'*'", "';'", "':'", "'<'", "'>'", "'('", "')'", "'{'", "'}'", 
		"'t_'", "'&'", "','", "'uses'", "'as'", null, "'function'", "'table'", 
		null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Hash", "Star", "Semicolon", "Colin", "Langle", "Rangle", "Lparam", 
		"Rparam", "LCurly", "RCurly", "TablePrefix", "ArgumentPrefix", "Comma", 
		"Uses", "As", "HttpMethod", "Function", "Table", "Identifier", "IntegerLiteral", 
		"NullLiteral", "BooleanLiteral", "DecimalLiteral", "StringLiteral", "WhiteSpaces", 
		"LineTerminator", "TableReference", "ArgumentReference", "Literal", "LParam", 
		"RParam", "Colon"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DescriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DescriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DescriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DescriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(DescriptParser.IntegerLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(DescriptParser.BooleanLiteral, 0); }
		public ITerminalNode NullLiteral() { return GetToken(DescriptParser.NullLiteral, 0); }
		public ITerminalNode DecimalLiteral() { return GetToken(DescriptParser.DecimalLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(DescriptParser.StringLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 0, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << StringLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceContext : ParserRuleContext {
		public ITerminalNode TablePrefix() { return GetToken(DescriptParser.TablePrefix, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterTableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitTableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceContext tableReference() {
		TableReferenceContext _localctx = new TableReferenceContext(Context, State);
		EnterRule(_localctx, 2, RULE_tableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(TablePrefix);
			State = 47; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentReferenceContext : ParserRuleContext {
		public ITerminalNode ArgumentPrefix() { return GetToken(DescriptParser.ArgumentPrefix, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ArgumentReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentReferenceContext argumentReference() {
		ArgumentReferenceContext _localctx = new ArgumentReferenceContext(Context, State);
		EnterRule(_localctx, 4, RULE_argumentReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(ArgumentPrefix);
			State = 50; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		public ITerminalNode TableReference() { return GetToken(DescriptParser.TableReference, 0); }
		public ITerminalNode ArgumentReference() { return GetToken(DescriptParser.ArgumentReference, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 6, RULE_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(TableReference);
			State = 53; Match(ArgumentReference);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(DescriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(DescriptParser.Identifier, i);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 8, RULE_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(Identifier);
			State = 56; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedParameterContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(DescriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(DescriptParser.Identifier, i);
		}
		public ITerminalNode[] Star() { return GetTokens(DescriptParser.Star); }
		public ITerminalNode Star(int i) {
			return GetToken(DescriptParser.Star, i);
		}
		public TypedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterTypedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitTypedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedParameterContext typedParameter() {
		TypedParameterContext _localctx = new TypedParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_typedParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(Identifier);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Star) {
				{
				{
				State = 59; Match(Star);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnParameterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode LCurly() { return GetToken(DescriptParser.LCurly, 0); }
		public ITerminalNode RCurly() { return GetToken(DescriptParser.RCurly, 0); }
		public TypedParameterContext[] typedParameter() {
			return GetRuleContexts<TypedParameterContext>();
		}
		public TypedParameterContext typedParameter(int i) {
			return GetRuleContext<TypedParameterContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public ColumnParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterColumnParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitColumnParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnParameterContext columnParameter() {
		ColumnParameterContext _localctx = new ColumnParameterContext(Context, State);
		EnterRule(_localctx, 12, RULE_columnParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(Identifier);
			State = 68; Match(LCurly);
			State = 74;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 69; typedParameter();
					State = 70; Match(Comma);
					}
					} 
				}
				State = 76;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 77; typedParameter();
				}
			}

			State = 80; Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public TypedParameterContext typedParameter() {
			return GetRuleContext<TypedParameterContext>(0);
		}
		public ColumnParameterContext columnParameter() {
			return GetRuleContext<ColumnParameterContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionParameter);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; typedParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; columnParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperFunctionArgumentContext : ParserRuleContext {
		public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ITerminalNode Literal() { return GetToken(DescriptParser.Literal, 0); }
		public SuperFunctionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superFunctionArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSuperFunctionArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSuperFunctionArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperFunctionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperFunctionArgumentContext superFunctionArgument() {
		SuperFunctionArgumentContext _localctx = new SuperFunctionArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_superFunctionArgument);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TableReference:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; reference();
				}
				break;
			case Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; Match(Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperFunctionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode LParam() { return GetToken(DescriptParser.LParam, 0); }
		public ITerminalNode RParam() { return GetToken(DescriptParser.RParam, 0); }
		public SuperFunctionArgumentContext[] superFunctionArgument() {
			return GetRuleContexts<SuperFunctionArgumentContext>();
		}
		public SuperFunctionArgumentContext superFunctionArgument(int i) {
			return GetRuleContext<SuperFunctionArgumentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public SuperFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSuperFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSuperFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperFunctionContext superFunction() {
		SuperFunctionContext _localctx = new SuperFunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_superFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(Identifier);
			State = 91; Match(LParam);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 92; superFunctionArgument();
					State = 93; Match(Comma);
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TableReference || _la==Literal) {
				{
				State = 100; superFunctionArgument();
				}
			}

			State = 103; Match(RParam);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperFunctionClauseContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(DescriptParser.Colon, 0); }
		public SuperFunctionContext[] superFunction() {
			return GetRuleContexts<SuperFunctionContext>();
		}
		public SuperFunctionContext superFunction(int i) {
			return GetRuleContext<SuperFunctionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public SuperFunctionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superFunctionClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSuperFunctionClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSuperFunctionClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperFunctionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperFunctionClauseContext superFunctionClause() {
		SuperFunctionClauseContext _localctx = new SuperFunctionClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_superFunctionClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(Colon);
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 106; superFunction();
					State = 107; Match(Comma);
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 114; superFunction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsesClauseContext : ParserRuleContext {
		public ITerminalNode Uses() { return GetToken(DescriptParser.Uses, 0); }
		public UsesFragContext[] usesFrag() {
			return GetRuleContexts<UsesFragContext>();
		}
		public UsesFragContext usesFrag(int i) {
			return GetRuleContext<UsesFragContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public UsesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usesClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterUsesClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitUsesClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsesClauseContext usesClause() {
		UsesClauseContext _localctx = new UsesClauseContext(Context, State);
		EnterRule(_localctx, 22, RULE_usesClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(Uses);
			State = 123;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 118; usesFrag();
					State = 119; Match(Comma);
					}
					} 
				}
				State = 125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 126; usesFrag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsesFragContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(DescriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(DescriptParser.Identifier, i);
		}
		public ITerminalNode As() { return GetToken(DescriptParser.As, 0); }
		public UsesFragContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usesFrag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterUsesFrag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitUsesFrag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsesFrag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsesFragContext usesFrag() {
		UsesFragContext _localctx = new UsesFragContext(Context, State);
		EnterRule(_localctx, 24, RULE_usesFrag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(Identifier);
			State = 129; Match(As);
			State = 130; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public ITerminalNode HttpMethod() { return GetToken(DescriptParser.HttpMethod, 0); }
		public ITerminalNode Function() { return GetToken(DescriptParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Lparam() { return GetToken(DescriptParser.Lparam, 0); }
		public ITerminalNode Rparam() { return GetToken(DescriptParser.Rparam, 0); }
		public ITerminalNode Semicolon() { return GetToken(DescriptParser.Semicolon, 0); }
		public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public SuperFunctionClauseContext superFunctionClause() {
			return GetRuleContext<SuperFunctionClauseContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(HttpMethod);
			State = 133; Match(Function);
			State = 134; Match(Identifier);
			State = 135; Match(Lparam);
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 136; functionParameter();
					State = 137; Match(Comma);
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 144; functionParameter();
				}
			}

			State = 147; Match(Rparam);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 148; superFunctionClause();
				}
			}

			State = 151; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDefinitionContext : ParserRuleContext {
		public ITerminalNode Table() { return GetToken(DescriptParser.Table, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Lparam() { return GetToken(DescriptParser.Lparam, 0); }
		public ITerminalNode Rparam() { return GetToken(DescriptParser.Rparam, 0); }
		public ITerminalNode Semicolon() { return GetToken(DescriptParser.Semicolon, 0); }
		public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public TableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterTableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitTableDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDefinitionContext tableDefinition() {
		TableDefinitionContext _localctx = new TableDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_tableDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(Table);
			State = 154; Match(Identifier);
			State = 155; Match(Lparam);
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 156; column();
					State = 157; Match(Comma);
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 164; column();
				}
			}

			State = 167; Match(Rparam);
			State = 168; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDefinitionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Langle() { return GetToken(DescriptParser.Langle, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode Rangle() { return GetToken(DescriptParser.Rangle, 0); }
		public ITerminalNode Semicolon() { return GetToken(DescriptParser.Semicolon, 0); }
		public LiteralDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDefinitionContext literalDefinition() {
		LiteralDefinitionContext _localctx = new LiteralDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_literalDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(Identifier);
			State = 171; Match(Langle);
			State = 172; literal();
			State = 173; Match(Rangle);
			State = 174; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public LiteralDefinitionContext literalDefinition() {
			return GetRuleContext<LiteralDefinitionContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public TableDefinitionContext tableDefinition() {
			return GetRuleContext<TableDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_definition);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; literalDefinition();
				}
				break;
			case HttpMethod:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; functionDefinition();
				}
				break;
			case Table:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178; tableDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 34, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 181; section();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Hash );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionHeaderContext : ParserRuleContext {
		public ITerminalNode Hash() { return GetToken(DescriptParser.Hash, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public SectionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSectionHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSectionHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionHeaderContext sectionHeader() {
		SectionHeaderContext _localctx = new SectionHeaderContext(Context, State);
		EnterRule(_localctx, 36, RULE_sectionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(Hash);
			State = 187; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		public SectionHeaderContext sectionHeader() {
			return GetRuleContext<SectionHeaderContext>(0);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public SubsectionContext[] subsection() {
			return GetRuleContexts<SubsectionContext>();
		}
		public SubsectionContext subsection(int i) {
			return GetRuleContext<SubsectionContext>(i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 38, RULE_section);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; sectionHeader();
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 190; definition();
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 196; subsection();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsectionHeaderContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Colin() { return GetToken(DescriptParser.Colin, 0); }
		public SubsectionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsectionHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSubsectionHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSubsectionHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsectionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsectionHeaderContext subsectionHeader() {
		SubsectionHeaderContext _localctx = new SubsectionHeaderContext(Context, State);
		EnterRule(_localctx, 40, RULE_subsectionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(Identifier);
			State = 203; Match(Colin);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsectionContext : ParserRuleContext {
		public SubsectionHeaderContext subsectionHeader() {
			return GetRuleContext<SubsectionHeaderContext>(0);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public SubsectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSubsection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSubsection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsectionContext subsection() {
		SubsectionContext _localctx = new SubsectionContext(Context, State);
		EnterRule(_localctx, 42, RULE_subsection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; subsectionHeader();
			State = 207;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 206; definition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xD6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'?', '\n', '\a', '\f', '\a', '\xE', '\a', '\x42', '\v', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', 'K', '\n', '\b', '\f', '\b', '\xE', '\b', 'N', '\v', 
		'\b', '\x3', '\b', '\x5', '\b', 'Q', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', 'W', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '[', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\x62', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\x65', '\v', '\v', '\x3', '\v', '\x5', '\v', 'h', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', 'p', '\n', '\f', '\f', '\f', '\xE', '\f', 's', 
		'\v', '\f', '\x3', '\f', '\x5', '\f', 'v', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '|', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x7F', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x8E', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x91', '\v', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x94', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x98', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '\xA2', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\xA5', '\v', '\x10', '\x3', '\x10', '\x5', '\x10', '\xA8', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xB6', '\n', 
		'\x12', '\x3', '\x13', '\x6', '\x13', '\xB9', '\n', '\x13', '\r', '\x13', 
		'\xE', '\x13', '\xBA', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\xC2', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\xC5', '\v', '\x15', '\x3', '\x15', '\a', '\x15', '\xC8', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xCB', '\v', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x6', 
		'\x17', '\xD2', '\n', '\x17', '\r', '\x17', '\xE', '\x17', '\xD3', '\x3', 
		'\x17', '\x2', '\x2', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '\x2', '\x3', '\x3', '\x2', '\x16', '\x1A', '\x2', 
		'\xD4', '\x2', '.', '\x3', '\x2', '\x2', '\x2', '\x4', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x33', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\n', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\f', '<', '\x3', '\x2', '\x2', '\x2', '\xE', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'V', '\x3', '\x2', '\x2', '\x2', '\x12', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\\', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x18', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x9B', '\x3', '\x2', '\x2', '\x2', ' ', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xB8', '\x3', '\x2', '\x2', '\x2', '&', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xBF', '\x3', '\x2', '\x2', '\x2', '*', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xCF', '\x3', '\x2', '\x2', '\x2', '.', '/', '\t', 
		'\x2', '\x2', '\x2', '/', '\x3', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\r', '\x2', '\x2', '\x31', '\x32', '\a', '\x15', '\x2', '\x2', 
		'\x32', '\x5', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', '\xE', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\x15', '\x2', '\x2', '\x35', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\x1D', '\x2', '\x2', 
		'\x37', '\x38', '\a', '\x1E', '\x2', '\x2', '\x38', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\a', '\x15', '\x2', '\x2', ':', ';', '\a', 
		'\x15', '\x2', '\x2', ';', '\v', '\x3', '\x2', '\x2', '\x2', '<', '@', 
		'\a', '\x15', '\x2', '\x2', '=', '?', '\a', '\x4', '\x2', '\x2', '>', 
		'=', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x15', '\x2', '\x2', '\x44', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x15', '\x2', 
		'\x2', '\x46', 'L', '\a', '\v', '\x2', '\x2', 'G', 'H', '\x5', '\f', '\a', 
		'\x2', 'H', 'I', '\a', '\xF', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'G', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'Q', '\x5', '\f', '\a', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', '\f', '\x2', '\x2', 'S', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'W', '\x5', '\f', '\a', '\x2', 'U', 'W', '\x5', '\xE', '\b', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', '\x11', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x5', '\b', 
		'\x5', '\x2', 'Y', '[', '\a', '\x1F', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\x15', '\x2', '\x2', ']', '\x63', 
		'\a', ' ', '\x2', '\x2', '^', '_', '\x5', '\x12', '\n', '\x2', '_', '`', 
		'\a', '\xF', '\x2', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x5', '\x12', '\n', 
		'\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '!', 
		'\x2', '\x2', 'j', '\x15', '\x3', '\x2', '\x2', '\x2', 'k', 'q', '\a', 
		'\"', '\x2', '\x2', 'l', 'm', '\x5', '\x14', '\v', '\x2', 'm', 'n', '\a', 
		'\xF', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 'o', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', 
		'\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x5', 
		'\x14', '\v', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'v', '\x17', '\x3', '\x2', '\x2', '\x2', 'w', '}', 
		'\a', '\x10', '\x2', '\x2', 'x', 'y', '\x5', '\x1A', '\xE', '\x2', 'y', 
		'z', '\a', '\xF', '\x2', '\x2', 'z', '|', '\x3', '\x2', '\x2', '\x2', 
		'{', 'x', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\x5', '\x1A', '\xE', '\x2', '\x81', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '\x15', '\x2', '\x2', 
		'\x83', '\x84', '\a', '\x11', '\x2', '\x2', '\x84', '\x85', '\a', '\x15', 
		'\x2', '\x2', '\x85', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', 
		'\a', '\x12', '\x2', '\x2', '\x87', '\x88', '\a', '\x13', '\x2', '\x2', 
		'\x88', '\x89', '\a', '\x15', '\x2', '\x2', '\x89', '\x8F', '\a', '\t', 
		'\x2', '\x2', '\x8A', '\x8B', '\x5', '\x10', '\t', '\x2', '\x8B', '\x8C', 
		'\a', '\xF', '\x2', '\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x5', '\x10', 
		'\t', '\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x97', '\a', '\n', '\x2', '\x2', '\x96', '\x98', '\x5', '\x16', 
		'\f', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9A', '\a', '\x5', '\x2', '\x2', '\x9A', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\a', '\x14', '\x2', '\x2', '\x9C', '\x9D', 
		'\a', '\x15', '\x2', '\x2', '\x9D', '\xA3', '\a', '\t', '\x2', '\x2', 
		'\x9E', '\x9F', '\x5', '\n', '\x6', '\x2', '\x9F', '\xA0', '\a', '\xF', 
		'\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\x5', '\n', '\x6', '\x2', 
		'\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', 
		'\a', '\n', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x5', '\x2', '\x2', '\xAB', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x15', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '\a', '\x2', '\x2', '\xAE', '\xAF', '\x5', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\b', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\x5', '\x2', '\x2', '\xB1', '!', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB6', '\x5', ' ', '\x11', '\x2', '\xB3', '\xB6', '\x5', '\x1C', 
		'\xF', '\x2', '\xB4', '\xB6', '\x5', '\x1E', '\x10', '\x2', '\xB5', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB9', '\x5', '(', '\x15', '\x2', '\xB8', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '%', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\a', '\x3', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x15', '\x2', '\x2', 
		'\xBE', '\'', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC3', '\x5', '&', 
		'\x14', '\x2', '\xC0', '\xC2', '\x5', '\"', '\x12', '\x2', '\xC1', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\x5', ',', '\x17', '\x2', 
		'\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', ')', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x15', '\x2', 
		'\x2', '\xCD', '\xCE', '\a', '\x6', '\x2', '\x2', '\xCE', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xD1', '\x5', '*', '\x16', '\x2', '\xD0', 
		'\xD2', '\x5', '\"', '\x12', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x16', '@', 'L', 'P', 'V', 'Z', '\x63', 
		'g', 'q', 'u', '}', '\x8F', '\x93', '\x97', '\xA3', '\xA7', '\xB5', '\xBA', 
		'\xC3', '\xC9', '\xD3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
