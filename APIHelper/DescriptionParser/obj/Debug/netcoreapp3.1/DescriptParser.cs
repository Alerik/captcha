//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\xampp\htdocs\captcha\APIHelper\DescriptionParser\DescriptParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DescriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Hash=1, Star=2, Semicolon=3, Colin=4, Langle=5, Rangle=6, Lparam=7, Rparam=8, 
		Comma=9, Function=10, Table=11, Identifier=12, Literal=13, NullLiteral=14, 
		BooleanLiteral=15, DecimalLiteral=16, HexIntegerLiteral=17, OctalIntegerLiteral=18, 
		OctalIntegerLiteral2=19, BinaryIntegerLiteral=20, StringLiteral=21, WhiteSpaces=22, 
		LineTerminator=23, Semicolin=24;
	public const int
		RULE_column = 0, RULE_functionArg = 1, RULE_functionDefinition = 2, RULE_tableDefinition = 3, 
		RULE_literalDefinition = 4, RULE_definition = 5, RULE_file = 6, RULE_sectionHeader = 7, 
		RULE_section = 8, RULE_subsectionHeader = 9, RULE_subsection = 10;
	public static readonly string[] ruleNames = {
		"column", "functionArg", "functionDefinition", "tableDefinition", "literalDefinition", 
		"definition", "file", "sectionHeader", "section", "subsectionHeader", 
		"subsection"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'*'", "';'", "':'", "'<'", "'>'", "'('", "')'", "','", "'function'", 
		"'table'", null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Hash", "Star", "Semicolon", "Colin", "Langle", "Rangle", "Lparam", 
		"Rparam", "Comma", "Function", "Table", "Identifier", "Literal", "NullLiteral", 
		"BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", 
		"OctalIntegerLiteral2", "BinaryIntegerLiteral", "StringLiteral", "WhiteSpaces", 
		"LineTerminator", "Semicolin"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DescriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DescriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DescriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DescriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ColumnContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(DescriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(DescriptParser.Identifier, i);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 0, RULE_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(Identifier);
			State = 23; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(DescriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(DescriptParser.Identifier, i);
		}
		public ITerminalNode Star() { return GetToken(DescriptParser.Star, 0); }
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(Identifier);
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star) {
				{
				State = 26; Match(Star);
				}
			}

			State = 29; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(DescriptParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Lparam() { return GetToken(DescriptParser.Lparam, 0); }
		public ITerminalNode Rparam() { return GetToken(DescriptParser.Rparam, 0); }
		public ITerminalNode Semicolon() { return GetToken(DescriptParser.Semicolon, 0); }
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; Match(Function);
			State = 32; Match(Identifier);
			State = 33; Match(Lparam);
			State = 39;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 34; functionArg();
					State = 35; Match(Comma);
					}
					} 
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 42; functionArg();
				}
			}

			State = 45; Match(Rparam);
			State = 46; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDefinitionContext : ParserRuleContext {
		public ITerminalNode Table() { return GetToken(DescriptParser.Table, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Lparam() { return GetToken(DescriptParser.Lparam, 0); }
		public ITerminalNode Rparam() { return GetToken(DescriptParser.Rparam, 0); }
		public ITerminalNode Semicolon() { return GetToken(DescriptParser.Semicolon, 0); }
		public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public TableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterTableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitTableDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDefinitionContext tableDefinition() {
		TableDefinitionContext _localctx = new TableDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_tableDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(Table);
			State = 49; Match(Identifier);
			State = 50; Match(Lparam);
			State = 56;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 51; column();
					State = 52; Match(Comma);
					}
					} 
				}
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 59; column();
				}
			}

			State = 62; Match(Rparam);
			State = 63; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDefinitionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Langle() { return GetToken(DescriptParser.Langle, 0); }
		public ITerminalNode Literal() { return GetToken(DescriptParser.Literal, 0); }
		public ITerminalNode Rangle() { return GetToken(DescriptParser.Rangle, 0); }
		public ITerminalNode Semicolin() { return GetToken(DescriptParser.Semicolin, 0); }
		public LiteralDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDefinitionContext literalDefinition() {
		LiteralDefinitionContext _localctx = new LiteralDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_literalDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(Identifier);
			State = 66; Match(Langle);
			State = 67; Match(Literal);
			State = 68; Match(Rangle);
			State = 69; Match(Semicolin);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public LiteralDefinitionContext literalDefinition() {
			return GetRuleContext<LiteralDefinitionContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public TableDefinitionContext tableDefinition() {
			return GetRuleContext<TableDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_definition);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71; literalDefinition();
				}
				break;
			case Function:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; functionDefinition();
				}
				break;
			case Table:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73; tableDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 12, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 76; section();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Hash );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionHeaderContext : ParserRuleContext {
		public ITerminalNode Hash() { return GetToken(DescriptParser.Hash, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public SectionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSectionHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSectionHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionHeaderContext sectionHeader() {
		SectionHeaderContext _localctx = new SectionHeaderContext(Context, State);
		EnterRule(_localctx, 14, RULE_sectionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(Hash);
			State = 82; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		public SectionHeaderContext sectionHeader() {
			return GetRuleContext<SectionHeaderContext>(0);
		}
		public SubsectionContext[] subsection() {
			return GetRuleContexts<SubsectionContext>();
		}
		public SubsectionContext subsection(int i) {
			return GetRuleContext<SubsectionContext>(i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 16, RULE_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; sectionHeader();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Table) | (1L << Identifier))) != 0)) {
				{
				{
				State = 85; subsection();
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsectionHeaderContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Colin() { return GetToken(DescriptParser.Colin, 0); }
		public SubsectionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsectionHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSubsectionHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSubsectionHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsectionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsectionHeaderContext subsectionHeader() {
		SubsectionHeaderContext _localctx = new SubsectionHeaderContext(Context, State);
		EnterRule(_localctx, 18, RULE_subsectionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(Identifier);
			State = 92; Match(Colin);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsectionContext : ParserRuleContext {
		public SubsectionHeaderContext subsectionHeader() {
			return GetRuleContext<SubsectionHeaderContext>(0);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public SubsectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSubsection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSubsection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsectionContext subsection() {
		SubsectionContext _localctx = new SubsectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_subsection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 94; subsectionHeader();
				}
				break;
			}
			State = 98;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 97; definition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1A', 'i', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1E', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '(', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '+', '\v', '\x4', '\x3', '\x4', '\x5', '\x4', '.', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'\x39', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '<', '\v', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '?', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'M', '\n', '\a', '\x3', '\b', '\x6', '\b', 'P', '\n', '\b', '\r', '\b', 
		'\xE', '\b', 'Q', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 'Y', '\n', '\n', '\f', '\n', '\xE', '\n', '\\', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x5', 
		'\f', '\x62', '\n', '\f', '\x3', '\f', '\x6', '\f', '\x65', '\n', '\f', 
		'\r', '\f', '\xE', '\f', '\x66', '\x3', '\f', '\x2', '\x2', '\r', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x2', '\x2', '\x2', 'h', '\x2', '\x18', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x6', '!', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'L', '\x3', '\x2', '\x2', '\x2', '\xE', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'S', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x14', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x61', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', '\xE', 
		'\x2', '\x2', '\x19', '\x1A', '\a', '\xE', '\x2', '\x2', '\x1A', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\a', '\xE', '\x2', '\x2', 
		'\x1C', '\x1E', '\a', '\x4', '\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\xE', '\x2', '\x2', ' ', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\f', '\x2', '\x2', 
		'\"', '#', '\a', '\xE', '\x2', '\x2', '#', ')', '\a', '\t', '\x2', '\x2', 
		'$', '%', '\x5', '\x4', '\x3', '\x2', '%', '&', '\a', '\v', '\x2', '\x2', 
		'&', '(', '\x3', '\x2', '\x2', '\x2', '\'', '$', '\x3', '\x2', '\x2', 
		'\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', 
		'\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x5', '\x4', 
		'\x3', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', 
		'\n', '\x2', '\x2', '\x30', '\x31', '\a', '\x5', '\x2', '\x2', '\x31', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\r', '\x2', '\x2', 
		'\x33', '\x34', '\a', '\xE', '\x2', '\x2', '\x34', ':', '\a', '\t', '\x2', 
		'\x2', '\x35', '\x36', '\x5', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', 
		'\v', '\x2', '\x2', '\x37', '\x39', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x39', '<', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', 
		'\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', 
		'\x2', '\x2', '=', '?', '\x5', '\x2', '\x2', '\x2', '>', '=', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\a', '\n', '\x2', '\x2', '\x41', '\x42', '\a', 
		'\x5', '\x2', '\x2', '\x42', '\t', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\xE', '\x2', '\x2', '\x44', '\x45', '\a', '\a', '\x2', 
		'\x2', '\x45', '\x46', '\a', '\xF', '\x2', '\x2', '\x46', 'G', '\a', '\b', 
		'\x2', '\x2', 'G', 'H', '\a', '\x1A', '\x2', '\x2', 'H', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'M', '\x5', '\n', '\x6', '\x2', 'J', 'M', '\x5', 
		'\x6', '\x4', '\x2', 'K', 'M', '\x5', '\b', '\x5', '\x2', 'L', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'M', '\r', '\x3', '\x2', '\x2', '\x2', 'N', 'P', 
		'\x5', '\x12', '\n', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\a', '\x3', '\x2', '\x2', 'T', 'U', '\a', '\xE', '\x2', 
		'\x2', 'U', '\x11', '\x3', '\x2', '\x2', '\x2', 'V', 'Z', '\x5', '\x10', 
		'\t', '\x2', 'W', 'Y', '\x5', '\x16', '\f', '\x2', 'X', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', 
		'^', '\a', '\xE', '\x2', '\x2', '^', '_', '\a', '\x6', '\x2', '\x2', '_', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\x5', '\x14', '\v', 
		'\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x65', '\x5', '\f', '\a', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x1D', ')', '-', ':', '>', 'L', 'Q', 
		'Z', '\x61', '\x66',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
