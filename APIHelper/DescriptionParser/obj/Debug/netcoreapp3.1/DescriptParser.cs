//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\xampp\htdocs\captcha\APIHelper\DescriptionParser\DescriptParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DescriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Hash=1, Star=2, Semicolon=3, Colin=4, Langle=5, Rangle=6, Lparam=7, Rparam=8, 
		Comma=9, Uses=10, As=11, HttpMethod=12, Function=13, Table=14, Identifier=15, 
		Literal=16, NullLiteral=17, BooleanLiteral=18, DecimalLiteral=19, HexIntegerLiteral=20, 
		OctalIntegerLiteral=21, OctalIntegerLiteral2=22, BinaryIntegerLiteral=23, 
		StringLiteral=24, WhiteSpaces=25, LineTerminator=26;
	public const int
		RULE_column = 0, RULE_functionArg = 1, RULE_usesClause = 2, RULE_usesFrag = 3, 
		RULE_functionDefinition = 4, RULE_tableDefinition = 5, RULE_literalDefinition = 6, 
		RULE_definition = 7, RULE_file = 8, RULE_sectionHeader = 9, RULE_section = 10, 
		RULE_subsectionHeader = 11, RULE_subsection = 12;
	public static readonly string[] ruleNames = {
		"column", "functionArg", "usesClause", "usesFrag", "functionDefinition", 
		"tableDefinition", "literalDefinition", "definition", "file", "sectionHeader", 
		"section", "subsectionHeader", "subsection"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'*'", "';'", "':'", "'<'", "'>'", "'('", "')'", "','", "'uses'", 
		"'as'", null, "'function'", "'table'", null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Hash", "Star", "Semicolon", "Colin", "Langle", "Rangle", "Lparam", 
		"Rparam", "Comma", "Uses", "As", "HttpMethod", "Function", "Table", "Identifier", 
		"Literal", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"StringLiteral", "WhiteSpaces", "LineTerminator"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DescriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DescriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DescriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DescriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ColumnContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(DescriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(DescriptParser.Identifier, i);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 0, RULE_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(Identifier);
			State = 27; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(DescriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(DescriptParser.Identifier, i);
		}
		public ITerminalNode Star() { return GetToken(DescriptParser.Star, 0); }
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(Identifier);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star) {
				{
				State = 30; Match(Star);
				}
			}

			State = 33; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsesClauseContext : ParserRuleContext {
		public ITerminalNode Uses() { return GetToken(DescriptParser.Uses, 0); }
		public UsesFragContext[] usesFrag() {
			return GetRuleContexts<UsesFragContext>();
		}
		public UsesFragContext usesFrag(int i) {
			return GetRuleContext<UsesFragContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public UsesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usesClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterUsesClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitUsesClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsesClauseContext usesClause() {
		UsesClauseContext _localctx = new UsesClauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_usesClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(Uses);
			State = 41;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 36; usesFrag();
					State = 37; Match(Comma);
					}
					} 
				}
				State = 43;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 44; usesFrag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsesFragContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(DescriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(DescriptParser.Identifier, i);
		}
		public ITerminalNode As() { return GetToken(DescriptParser.As, 0); }
		public UsesFragContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usesFrag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterUsesFrag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitUsesFrag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsesFrag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsesFragContext usesFrag() {
		UsesFragContext _localctx = new UsesFragContext(Context, State);
		EnterRule(_localctx, 6, RULE_usesFrag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(Identifier);
			State = 47; Match(As);
			State = 48; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public ITerminalNode HttpMethod() { return GetToken(DescriptParser.HttpMethod, 0); }
		public ITerminalNode Function() { return GetToken(DescriptParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Lparam() { return GetToken(DescriptParser.Lparam, 0); }
		public ITerminalNode Rparam() { return GetToken(DescriptParser.Rparam, 0); }
		public ITerminalNode Semicolon() { return GetToken(DescriptParser.Semicolon, 0); }
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public UsesClauseContext usesClause() {
			return GetRuleContext<UsesClauseContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(HttpMethod);
			State = 51; Match(Function);
			State = 52; Match(Identifier);
			State = 53; Match(Lparam);
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 54; functionArg();
					State = 55; Match(Comma);
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 62; functionArg();
				}
			}

			State = 65; Match(Rparam);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Uses) {
				{
				State = 66; usesClause();
				}
			}

			State = 69; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDefinitionContext : ParserRuleContext {
		public ITerminalNode Table() { return GetToken(DescriptParser.Table, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Lparam() { return GetToken(DescriptParser.Lparam, 0); }
		public ITerminalNode Rparam() { return GetToken(DescriptParser.Rparam, 0); }
		public ITerminalNode Semicolon() { return GetToken(DescriptParser.Semicolon, 0); }
		public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(DescriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(DescriptParser.Comma, i);
		}
		public TableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterTableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitTableDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDefinitionContext tableDefinition() {
		TableDefinitionContext _localctx = new TableDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_tableDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(Table);
			State = 72; Match(Identifier);
			State = 73; Match(Lparam);
			State = 79;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 74; column();
					State = 75; Match(Comma);
					}
					} 
				}
				State = 81;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 82; column();
				}
			}

			State = 85; Match(Rparam);
			State = 86; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDefinitionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Langle() { return GetToken(DescriptParser.Langle, 0); }
		public ITerminalNode Literal() { return GetToken(DescriptParser.Literal, 0); }
		public ITerminalNode Rangle() { return GetToken(DescriptParser.Rangle, 0); }
		public ITerminalNode Semicolon() { return GetToken(DescriptParser.Semicolon, 0); }
		public LiteralDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDefinitionContext literalDefinition() {
		LiteralDefinitionContext _localctx = new LiteralDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_literalDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(Identifier);
			State = 89; Match(Langle);
			State = 90; Match(Literal);
			State = 91; Match(Rangle);
			State = 92; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public LiteralDefinitionContext literalDefinition() {
			return GetRuleContext<LiteralDefinitionContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public TableDefinitionContext tableDefinition() {
			return GetRuleContext<TableDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_definition);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; literalDefinition();
				}
				break;
			case HttpMethod:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; functionDefinition();
				}
				break;
			case Table:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; tableDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 16, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 99; section();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Hash );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionHeaderContext : ParserRuleContext {
		public ITerminalNode Hash() { return GetToken(DescriptParser.Hash, 0); }
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public SectionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSectionHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSectionHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionHeaderContext sectionHeader() {
		SectionHeaderContext _localctx = new SectionHeaderContext(Context, State);
		EnterRule(_localctx, 18, RULE_sectionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(Hash);
			State = 105; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		public SectionHeaderContext sectionHeader() {
			return GetRuleContext<SectionHeaderContext>(0);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public SubsectionContext[] subsection() {
			return GetRuleContexts<SubsectionContext>();
		}
		public SubsectionContext subsection(int i) {
			return GetRuleContext<SubsectionContext>(i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_section);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; sectionHeader();
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 108; definition();
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 114; subsection();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsectionHeaderContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DescriptParser.Identifier, 0); }
		public ITerminalNode Colin() { return GetToken(DescriptParser.Colin, 0); }
		public SubsectionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsectionHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSubsectionHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSubsectionHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsectionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsectionHeaderContext subsectionHeader() {
		SubsectionHeaderContext _localctx = new SubsectionHeaderContext(Context, State);
		EnterRule(_localctx, 22, RULE_subsectionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(Identifier);
			State = 121; Match(Colin);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsectionContext : ParserRuleContext {
		public SubsectionHeaderContext subsectionHeader() {
			return GetRuleContext<SubsectionHeaderContext>(0);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public SubsectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.EnterSubsection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDescriptParserListener typedListener = listener as IDescriptParserListener;
			if (typedListener != null) typedListener.ExitSubsection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescriptParserVisitor<TResult> typedVisitor = visitor as IDescriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsectionContext subsection() {
		SubsectionContext _localctx = new SubsectionContext(Context, State);
		EnterRule(_localctx, 24, RULE_subsection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; subsectionHeader();
			State = 125;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 124; definition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\x84', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '*', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '-', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '<', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '?', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', '\x42', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x46', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', 'P', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'S', '\v', '\a', '\x3', '\a', '\x5', '\a', 'V', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x64', '\n', '\t', '\x3', '\n', '\x6', '\n', 'g', 
		'\n', '\n', '\r', '\n', '\xE', '\n', 'h', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\a', '\f', 'p', '\n', '\f', '\f', '\f', 
		'\xE', '\f', 's', '\v', '\f', '\x3', '\f', '\a', '\f', 'v', '\n', '\f', 
		'\f', '\f', '\xE', '\f', 'y', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x6', '\xE', '\x80', '\n', '\xE', '\r', 
		'\xE', '\xE', '\xE', '\x81', '\x3', '\xE', '\x2', '\x2', '\xF', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x2', '\x2', '\x2', '\x83', '\x2', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x6', '%', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x30', '\x3', '\x2', '\x2', '\x2', '\n', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x10', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x66', '\x3', '\x2', '\x2', '\x2', '\x14', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'm', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x1A', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1D', '\a', '\x11', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x11', 
		'\x2', '\x2', '\x1E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1F', '!', 
		'\a', '\x11', '\x2', '\x2', ' ', '\"', '\a', '\x4', '\x2', '\x2', '!', 
		' ', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x11', '\x2', 
		'\x2', '$', '\x5', '\x3', '\x2', '\x2', '\x2', '%', '+', '\a', '\f', '\x2', 
		'\x2', '&', '\'', '\x5', '\b', '\x5', '\x2', '\'', '(', '\a', '\v', '\x2', 
		'\x2', '(', '*', '\x3', '\x2', '\x2', '\x2', ')', '&', '\x3', '\x2', '\x2', 
		'\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', '\x2', 
		'\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\b', '\x5', 
		'\x2', '/', '\a', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x11', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\r', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x11', '\x2', '\x2', '\x33', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\xE', '\x2', '\x2', '\x35', '\x36', '\a', '\xF', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\x11', '\x2', '\x2', '\x37', '=', 
		'\a', '\t', '\x2', '\x2', '\x38', '\x39', '\x5', '\x4', '\x3', '\x2', 
		'\x39', ':', '\a', '\v', '\x2', '\x2', ':', '<', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x38', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x42', '\x5', '\x4', '\x3', '\x2', '\x41', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\a', 
		'\n', '\x2', '\x2', '\x44', '\x46', '\x5', '\x6', '\x4', '\x2', '\x45', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x5', 
		'\x2', '\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x10', 
		'\x2', '\x2', 'J', 'K', '\a', '\x11', '\x2', '\x2', 'K', 'Q', '\a', '\t', 
		'\x2', '\x2', 'L', 'M', '\x5', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\v', 
		'\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x5', '\x2', 
		'\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\n', 
		'\x2', '\x2', 'X', 'Y', '\a', '\x5', '\x2', '\x2', 'Y', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\a', '\x11', '\x2', '\x2', '[', '\\', '\a', '\a', 
		'\x2', '\x2', '\\', ']', '\a', '\x12', '\x2', '\x2', ']', '^', '\a', '\b', 
		'\x2', '\x2', '^', '_', '\a', '\x5', '\x2', '\x2', '_', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x64', '\x5', '\xE', '\b', '\x2', '\x61', '\x64', 
		'\x5', '\n', '\x6', '\x2', '\x62', '\x64', '\x5', '\f', '\a', '\x2', '\x63', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'g', '\x5', '\x16', '\f', '\x2', '\x66', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'i', '\x13', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\x3', 
		'\x2', '\x2', 'k', 'l', '\a', '\x11', '\x2', '\x2', 'l', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'q', '\x5', '\x14', '\v', '\x2', 'n', 'p', '\x5', 
		'\x10', '\t', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'w', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', 
		'\x2', '\x2', '\x2', 't', 'v', '\x5', '\x1A', '\xE', '\x2', 'u', 't', 
		'\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', '\x2', 'w', 
		'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x17', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\x11', '\x2', '\x2', '{', '|', '\a', '\x6', '\x2', 
		'\x2', '|', '\x19', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x5', '\x18', 
		'\r', '\x2', '~', '\x80', '\x5', '\x10', '\t', '\x2', '\x7F', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE', '!', '+', '=', 
		'\x41', '\x45', 'Q', 'U', '\x63', 'h', 'q', 'w', '\x81',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
